Vagrant.configure("2") do |config|

  unless Vagrant.has_plugin?("vagrant-disksize")
    raise  Vagrant::Errors::VagrantError.new, "vagrant-disksize plugin is missing. Please install it using 'vagrant plugin install vagrant-disksize' and rerun 'vagrant up'"
  end

  servers = [
    { :id => "1", :name => "CentOS 7", :box => "centos/7", :hostname => "centos7", :type => "linux" },
    { :id => "2", :name => "CentOS 8 Stream", :box => "centos/stream8", :hostname => "centos8", :type => "linux" },
    { :id => "3", :name => "CentOS 9 Stream", :box => "boxomatic/centos-stream-9", :hostname => "centos9", :type => "linux" },
    { :id => "4", :name => "Debian 10", :box => "generic/debian10", :hostname => "debian10", :type => "linux" },
    { :id => "5", :name => "Oracle Linux 7", :box => "eurolinux-vagrant/oracle-linux-7", :hostname => "oraclelinux7", :type => "linux" },
    { :id => "6", :name => "Oracle Linux 8", :box => "eurolinux-vagrant/oracle-linux-8", :hostname => "oraclelinux8", :type => "linux" },
    { :id => "7", :name => "Red Hat Enterprise Server 7", :box => "generic/rhel7", :hostname => "rhel7", :type => "linux" },
    { :id => "8", :name => "Red Hat Enterprise Server 8", :box => "generic/rhel8", :hostname => "rhel8", :type => "linux" },
    { :id => "9", :name => "Ubuntu 20.04", :box => "generic/ubuntu2004", :hostname => "ubuntu2004", :type => "linux" },
    { :id => "10", :name => "Ubuntu 22.04", :box => "generic/ubuntu2204", :hostname => "ubuntu2204", :type => "linux" },
    { :id => "11", :name => "Windows Server 2019 with Docker", :box => "StefanScherer/windows_2019_docker", :hostname => "ws2019docker", :type => "windows" },
    { :id => "12", :name => "Windows Server 2022 with Docker", :box => "StefanScherer/windows_2022_docker", :hostname => "ws2022docker", :type => "windows" },
    { :id => "13", :name => "Windows Server 2019", :box => "StefanScherer/windows_2019", :hostname => "ws2019", :type => "windows" },
    { :id => "14", :name => "Windows Server 2022", :box => "StefanScherer/windows_2022", :hostname => "ws2022", :type => "windows" }
  ]

  servers.each do |server|
    print server[:id] + " => " + server[:name] + "\n"
  end

  print "Which operating system do you want to provision?: "
  optionServer = STDIN.gets.chomp
  serverFind = servers.select { |server| server[:id] == optionServer }

  if (serverFind.empty?)
    print "ERROR: Operating system entered is not in the available list"
    exit
  end

  serverSelected = serverFind.first()
  print "======= Selected Operating System.. ======= \n"
  print " ID       => " + serverSelected[:id] + "\n"
  print " NAME     => " + serverSelected[:name] + "\n"
  print " BOX      => " + serverSelected[:box] + "\n"
  print " HOSTNAME => " + serverSelected[:hostname] + "\n"
  print "===========================================\n"
  
  config.vm.define serverSelected[:name] do |machine|
    machine.vm.box = serverSelected[:box]
    machine.vm.hostname = serverSelected[:hostname]

    machine.vm.network "public_network"

    machine.vm.provider :virtualbox do |vb|
      vb.memory = "16384"
      vb.cpus = 8
      vb.name = serverSelected[:name]
    end

    if serverSelected[:type].eql?("windows")
      machine.vm.provision "shell", inline: <<-SHELL
        \$ErrorActionPreference = "Stop";
        
        If (Test-Path -Path C:\\vagrant\\scripts\\custom\\custom.ps1 -PathType Leaf) {
          C:\\vagrant\\scripts\\custom\\custom.ps1
        }
      SHELL
    else
      machine.vm.provision "shell", inline: <<-SHELL
        #!/bin/bash
  
        if [[ -f /vagrant/scripts/custom/custom.sh ]]; then
          bash /vagrant/scripts/custom/custom.sh
        fi
      SHELL
    end
  end

end
